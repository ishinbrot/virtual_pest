{"version":3,"sources":["Components/CardComponent/CardComponent.module.css","assets/penguin_happy.png","assets/penguin_dead.png","assets/penguin_playful.png","assets/penguin_hungry.png","assets/penguin_enraged.png","Components/Layout/Layout.module.css","logo.svg","Components/CardComponent/CardComponent.js","Components/Layout/VirtualPest/VirtualPest.js","assets/constants.js","Components/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CardComponent","props","cardButtons","settings","state","Button","size","onClick","restart","button1Click","button1Text","button2Click","button2Text","Card","className","classes","root","CardActionArea","CardMedia","pestImage","image","imageLocation","title","component","CardContent","Typography","variant","Action","Sound","CardActions","VirtualPest","useState","counter","setCounter","sound","setSound","action","setAction","HappyPenguin","setImage","setState","useEffect","showState","EnragedPenguin","PlayfulPenguin","HungryPenguin","DeadlPenguin","VirtualPestCard","Layout","makeStyles","theme","flexGrow","menuButton","marginRight","spacing","AppBar","position","Toolbar","color","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5bcd1348.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"CardComponent_root__19exv\",\"container\":\"CardComponent_container__2r_3S\",\"pestImage\":\"CardComponent_pestImage__2aLu1\"};","module.exports = __webpack_public_path__ + \"static/media/penguin_happy.2d5a4e04.png\";","module.exports = __webpack_public_path__ + \"static/media/penguin_dead.3630001d.png\";","module.exports = __webpack_public_path__ + \"static/media/penguin_playful.f6c2fee9.png\";","module.exports = __webpack_public_path__ + \"static/media/penguin_hungry.53d29cc1.png\";","module.exports = __webpack_public_path__ + \"static/media/penguin_enraged.265db23c.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Layout_title__2cxSK\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport { Card } from '@material-ui/core';\r\nimport classes from './CardComponent.module.css'\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\n\r\nconst CardComponent = props => {\r\n\r\n    const cardButtons =\r\n        props.settings.state === \"dead\" ?\r\n            <Button size=\"small\" onClick={props.settings.restart}>RESTART</Button>\r\n        \r\n        :\r\n            <div>\r\n                <Button size=\"small\" onClick={props.settings.button1Click}>{props.settings.button1Text}</Button>\r\n                <Button size=\"small\" onClick={props.settings.button2Click}>{props.settings.button2Text}</Button>\r\n            </div>;\r\n        \r\n\r\n    \r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardActionArea>\r\n                <CardMedia\r\n                    className={classes.pestImage}\r\n                    image={props.settings.imageLocation}\r\n                    title={props.settings.state}\r\n                    component=\"img\"\r\n                />\r\n\r\n                <CardContent>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                        Action:   {props.settings.Action}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" component=\"p\">\r\n                        Sound:  {props.settings.Sound}\r\n                    </Typography>\r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n            {cardButtons}\r\n\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default CardComponent;","import React, { useState, useEffect } from 'react';\r\n\r\nimport CardComponent from '../../CardComponent/CardComponent';\r\nimport DeadlPenguin from '../../../assets/penguin_dead.png';\r\nimport PlayfulPenguin from '../../../assets/penguin_playful.png';\r\nimport HungryPenguin from '../../../assets/penguin_hungry.png';\r\nimport EnragedPenguin from '../../../assets/penguin_enraged.png';\r\nimport HappyPenguin from '../../../assets/penguin_happy.png';\r\n\r\n\r\nimport * as constants from '../../../assets/constants';\r\n\r\n\r\n\r\n\r\nconst VirtualPest = props => {\r\n\r\n    const [counter, setCounter] = useState(0);\r\n    const [sound, setSound] = useState('Yay');\r\n    const [action, setAction] = useState('Happy');\r\n    const [image, setImage] = useState(HappyPenguin);\r\n    const [state, setState] = useState('happy');\r\n\r\n    useEffect(() => {\r\n        showState();\r\n      }, [state]);\r\n      \r\n    const Pat = () =>{\r\n        if ( state === \"happy\") {\r\n            setState(\"playful\");\r\n        }\r\n        if (state=== \"playful\") {\r\n            setState(\"hungry\");\r\n        }\r\n        showState();\r\n    }\r\n    var Feed = () => {\r\n        if( state === \"hungry\" )\r\n        {\r\n        setState(\"happy\");\r\n        }\r\n        else if (state === \"happy\")\r\n        {\r\n            setState(\"playful\");\r\n\r\n        }\r\n        else if (state === \"playful\")\r\n        {\r\n            setState(\"enraged\");\r\n    \r\n        }\r\n        else if (state === \"enraged\"  )\r\n        {\r\n            setState(\"dead\");\r\n\r\n        }\r\n        else if (state === \"enraged\")\r\n        {\r\n            setState(\"happy\");\r\n        \r\n        }\r\n        else if (state === \"hungry\" )\r\n        {\r\n            setState( \"playful\");\r\n        }\r\n        showState();\r\n    }\r\n     const showState = () => {\r\n\r\n    \r\n        if (state === \"happy\") {\r\n            setAction(constants.HAPPY_ACTION);\r\n            setSound(constants.HAPPY_SOUND);\r\n            setImage(HappyPenguin);\r\n    \r\n    \r\n        }\r\n        else if (state === \"enraged\") {\r\n            setAction(constants.ENRAGED_ACTION)\r\n            setSound(constants.ENRAGED_SOUND)\r\n            setImage(EnragedPenguin);\r\n        }\r\n        else if (state === \"playful\") {\r\n            setSound(constants.PLAYFUL_SOUND);\r\n            setAction(constants.PLAYFUL_ACTION);\r\n            setImage(PlayfulPenguin);\r\n    \r\n        }\r\n        else if (state === \"hungry\") {\r\n            setSound(constants.HUNGRY_SOUND)\r\n            setAction(constants.HUNGRY_ACTION)\r\n            setImage(HungryPenguin);\r\n        }\r\n        else if (state === \"dead\") {\r\n            setAction(constants.DEAD_ACTION)\r\n            setSound(constants.DEAD_SOUND)\r\n            setImage(DeadlPenguin);\r\n        }\r\n    \r\n        else {\r\n            setAction(\"Error - unknown state\")\r\n            setSound(\"Oh No!\")\r\n        }\r\n        setCounter(counter+1);\r\n    }\r\n\r\n    const simulate = () => {\r\n        setCounter(counter+1);\r\n\r\n        var n = Math.random();\r\n\r\n\r\n        if( state == \"happy\" && n < 0.4 ) \r\n        setState(\"playful\");\r\n        else if( state == \"playful\" && 0.0<n && n< 0.2 )\r\n        setState(\"enraged\");\r\n        if (state == \"enraged\"&& 0.0 <n && n< 0.6)\r\n        setState(\"happy\");\r\n        else if (state == \"enraged\"&& 0.6<n && n<1)\r\n        setState(\"dead\");\r\n        if( state == \"hungry\" && n<0.3)\r\n        setState(\"happy\");\r\n        if( state == \"hungry\" && n<0.2)\r\n        setState(\"dead\");\r\n        if (state ==\"playful\" &&  n<0.2 && n<1)\r\n        setState(\"hungry\");\r\n\r\n        showState();\r\n\r\n        setTimeout(\"Simulate(thePest)\",1000)\r\n    }\r\n\r\n    const restart = () => {\r\n   \r\n    setState('happy');\r\n    showState();\r\n    }\r\n\r\n    const VirtualPestCard =\r\n    {\r\n        state: state,\r\n        Action: action,\r\n        Sound: sound,\r\n        button1Text: 'FEED',\r\n        button1Click: () => Pat(),\r\n        button2Click: () => Feed(),\r\n        button2Text: \"PAT\",\r\n        imageLocation: image,\r\n        restart: () => restart()\r\n    }\r\n    return (\r\n        <CardComponent settings={VirtualPestCard} />\r\n    );\r\n}\r\n\r\n\r\nexport default VirtualPest;","export const HAPPY_ACTION = \"Jumps Up and Down\";\r\nexport const HAPPY_SOUND = \"YAY\";\r\n\r\nexport const ENRAGED_ACTION=\"BIT!!!\";\r\nexport const ENRAGED_SOUND=\"Roar...\";\r\n\r\n\r\nexport const HUNGRY_SOUND=\"Meat...\";\r\nexport const HUNGRY_ACTION = \"Arms across belly and unhappy smile\";\r\n\r\nexport const DEAD_SOUND=\"\";\r\nexport const DEAD_ACTION=\"Lies dead on beach\";\r\n\r\nexport const PLAYFUL_SOUND=\"LALALA\";\r\nexport const PLAYFUL_ACTION=\"RUN AROUND\";","import React, { useState } from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport VirtualPest from './VirtualPest/VirtualPest';\r\nimport classes from './Layout.module.css';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nconst Layout = (props) => {\r\n\r\n\r\n  return (\r\n    <div>\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n\r\n      <div>\r\n      </div>\r\n      <Typography variant=\"h6\" className={classes.title}>\r\n      Optimus Prime the Crazy Penguin\r\n          </Typography>\r\n                 \r\n      <Button color=\"inherit\" href=\"https://ishinbrot.github.io/website/?fbclid=IwAR1yU_toMqN_PyEK7JAfTh_dpEDWTGSqVBVttLzxJW--Tr3rliYSKRfYd5g#/\">Return to website</Button>\r\n      </Toolbar>\r\n    </AppBar>\r\n    <VirtualPest />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Layout from './Components/Layout/Layout'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}